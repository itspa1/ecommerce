<h2>Sign up</h2>

<%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
  <%= devise_error_messages! %>

  <div class="field">
    <%= f.label :email %><br />
    <%= f.email_field :email, autofocus: true, id:"email" %>
    <span id="emailerror"></span>
  </div>

  <div class="field">
    <%= f.label :password %>
    <% if @minimum_password_length %>
    <em>(<%= @minimum_password_length %> characters minimum)</em>
    <% end %><br />
    <%= f.password_field :password, autocomplete: "off" %>
    <span id="passworderror"></span>
  </div>

  <div class="field">
    <%= f.label :password_confirmation %><br />
    <%= f.password_field :password_confirmation, autocomplete: "off" %>
    <span id="passwordconfirmerror"></span>
  </div>

  <div class="actions">
    <%= f.submit "Sign up", id:"submit" %>
  </div>
<% end %>

<%= render "devise/shared/links" %>

<script>
    var passwordHandle = document.getElementById('user_password');
    var passwordConfirmHandle = document.getElementById('user_password_confirmation');
    var submitHandle = document.getElementById('submit');
    var emailErrorHandle = document.getElementById('emailerror');
    var passwordErrorHandle = document.getElementById('passworderror');
    var passwordConfirmErrorHandle = document.getElementById('passwordconfirmerror');
    var emailHandle = document.getElementById('email');

    function validateEmail(email) {
    var re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(email);
    }

    emailHandle.onfocus = function(){
      emailErrorHandle.innerHTML = "";
    };

    emailHandle.onblur = function(){
      if(emailHandle.value == ""){
        emailErrorHandle.innerHTML = "Email can't be blank.";
      }else if(!validateEmail(emailHandle.value)){
        emailErrorHandle.innerHTML = "Invalid email format.";
      }else{
        checkEmailAvailability(emailHandle.value);
      }
    };

    function checkEmailAvailability(email){
      var request = new XMLHttpRequest();
      request.open('GET','/api/check_email.json?email_id=' + email);
      request.onreadystatechange = function(){
        if(request.readyState === 4 && request.status === 200){
          emailErrorHandle.innerHTML = JSON.parse(request.responseText).message;
        }
      };
      request.send();
    }

    passwordHandle.onblur = function(){
      if(passwordHandle.value == ""){
        passwordErrorHandle.innerHTML = "Can't be blank.";
      }
      else if(passwordHandle.value.length < 4){
        passwordErrorHandle.innerHTML = "Wrong length.";
      }else{
        passwordErrorHandle.innerHTML = "";
      }
    }

    passwordHandle.onfocus = function(){
      passwordErrorHandle = "";
    }

    passwordConfirmHandle.onblur = function(){
      if(passwordConfirmHandle.value !== passwordHandle.value){
        passwordConfirmErrorHandle.innerHTML = "Passwords do not match.";
        submitHandle.disabled = true;
      }else{
        passwordConfirmErrorHandle.innerHTML = "";
        submitHandle.disabled = false;
      }
    };

</script>